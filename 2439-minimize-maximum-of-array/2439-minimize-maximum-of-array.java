// leetcode daily challenge - 5th April 2023

// approach-2
class Solution {
    public int minimizeArrayValue(int[] nums) {
        int left=0,  right=Arrays.stream(nums).max().getAsInt();
        System.out.println(right);
        int ans = 0;
        while(left <= right){
            int mid = (left + right)/2;
            if(valid(mid, nums)){
                ans = mid;
                right = mid-1;
            }
            else  left = mid+1;
        }
        return ans;
    }

    public boolean valid(int mid, int[] nums){
        long sum=0;
        for(int i=0;i<nums.length;i++){
            sum += nums[i];
            if(sum > (long)mid * (i+1)) return false;
        }
        return true;
    }
}


// 19 / 68 testcases passed
// 30 / 68 testcases passed
// mathematical approach -> ceil based
// class Solution {
//     public int minimizeArrayValue(int[] nums) {
//         int len = nums.length;
//         float sum=0; int avg=Integer.MIN_VALUE;
//         for(int i=0;i<len;i++){
//             sum += nums[i];
//             float ans = sum/(i+1);
//             System.out.println(sum+" "+i+" "+sum/(i+1)+" "+Math.round(sum/(i+1))+" "+avg);
//             avg = Math.max(avg, (int)Math.ceil(sum/(i+1)));
//         }
//         return avg;
//     }
// }

// [13,13,20,0,8,9,9]
// o/p -> 16

// [921389843,380381646,658802804,581638795,95741010,455840718,559402200,675133080,217121816,785202255,885216061,424288239,810314770,148770127,779085371,751221011,432548512,302943760,140577082,760681122,578231315,450786991,253447426,13709319,738667009,789941144,204104514,567298259,127413624,254538185,321327724,988409115,886967563,869096454,785065717,180629745,177985366,160131906,563652854,60979747,825891361,475748834,184128414,901563849,991950617,629541064,674182788,95886149,333331044,665970351,125788323,18835082,585166454,283227873,861345573,805458076,696112644,320405336,49539969,538356493,590088396,328513038,608133766,344729649,862598414,959988916,431428188,829767360,274819297,204334375,425987324,337812762,529163645,699918060,409707608,190405475,953443717,756949322,358610581,930837058,597722596,64195607,491619020,630376127,76076531,885257183,283569188,796346818,805964442,51756366,75301629,368517828,50454608,848929140,166342341,668663237,27795557,579483310,841514788,201163455,149535598,122856873,499532685,960637018,934301035,560053114,755745001,461490721,682262838,425695890,192993741,937955965,359460228,68779844,972219503,247781947,108593492,82792055,631376477,688737067,424060377,377097134,215669212,731875452,380135598,354484627,688883412,39754922,457975033,685042107,313407577,864390848,712368763,167851486,915668163,975819703,532750135,692442863,498842692,371335914,707703027,179351471,942369968,307014918,139562883,542162009,52440514,707216563,903964267,737588169,118743462,940049331,664956840,459403165,704797137,374716384,109636555,624427728,451280303,71331923,145579398,871906915,557611200,309283095,186513846,116312718,224621408,197710442,537357412,76332096,24714085,520830926,522761451,499617632,951778752,225770501,355000228,729096700,559389995,139009293,564508652,128452110,755095154,342900350,987271551,400439126,71241029,358297120,506262484,284212613,368091962,277151563,961330767,334620397,13764628,397083505,942934570,60878431,567564750,330640040,518031361,461180162,361824254,217989089,604625906,215976956,940779923,457029311,222045759,908238939,964970639,859799853,899540356,515889226,741464169,457582172,909178520,586996398,618366148,965374640,599694986,58693970,919058130,855521310,293945640,312843345,504001920]
// o/p ->   921389843